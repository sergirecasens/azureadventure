{"version":3,"file":"parameters.js","sourceRoot":"","sources":["../../../../../src/generated/src/models/parameters.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH,OAAO,KAAK,QAAQ,MAAM,kBAAkB,CAAC;AAE7C,MAAM,CAAC,MAAM,cAAc,GAAgC;IACzD,aAAa,EAAE;QACb,SAAS;QACT,gBAAgB;KACjB;IACD,MAAM,EAAE;QACN,cAAc,EAAE,iBAAiB;QACjC,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,MAAM,CAAC,MAAM,KAAK,GAAqC;IACrD,aAAa,EAAE;QACb,SAAS;QACT,OAAO;KACR;IACD,MAAM,EAAE;QACN,cAAc,EAAE,OAAO;QACvB,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,MAAM,CAAC,MAAM,UAAU,GAAqC;IAC1D,aAAa,EAAE,YAAY;IAC3B,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,aAAa;QAC7B,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,MAAM,CAAC,MAAM,OAAO,GAAgC;IAClD,aAAa,EAAE;QACb,SAAS;QACT,SAAS;KACV;IACD,MAAM,EAAE;QACN,cAAc,EAAE,UAAU;QAC1B,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,MAAM,CAAC,MAAM,WAAW,GAAgC;IACtD,aAAa,EAAE;QACb,SAAS;QACT,aAAa;KACd;IACD,MAAM,EAAE;QACN,cAAc,EAAE,eAAe;QAC/B,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,MAAM,CAAC,MAAM,IAAI,GAAqC;IACpD,aAAa,EAAE;QACb,SAAS;QACT,KAAK;KACN;IACD,MAAM,EAAE;QACN,cAAc,EAAE,KAAK;QACrB,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,MAAM,CAAC,MAAM,IAAI,GAAmC;IAClD,aAAa,EAAE,KAAK;IACpB,MAAM,EAAE;QACN,QAAQ,EAAE,IAAI;QACd,cAAc,EAAE,KAAK;QACrB,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,MAAM,CAAC,MAAM,KAAK,GAAqC;IACrD,aAAa,EAAE;QACb,SAAS;QACT,OAAO;KACR;IACD,MAAM,EAAE;QACN,cAAc,EAAE,OAAO;QACvB,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,MAAM,CAAC,MAAM,IAAI,GAAqC;IACpD,aAAa,EAAE;QACb,SAAS;QACT,MAAM;KACP;IACD,MAAM,EAAE;QACN,cAAc,EAAE,MAAM;QACtB,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC;AACF,MAAM,CAAC,MAAM,MAAM,GAAqC;IACtD,aAAa,EAAE;QACb,SAAS;QACT,QAAQ;KACT;IACD,MAAM,EAAE;QACN,cAAc,EAAE,SAAS;QACzB,IAAI,EAAE;YACJ,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE;gBACP,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;KACF;IACD,gBAAgB,EAAE,QAAQ,CAAC,qBAAqB,CAAC,GAAG;CACrD,CAAC;AACF,MAAM,CAAC,MAAM,SAAS,GAAgC;IACpD,aAAa,EAAE,WAAW;IAC1B,MAAM,EAAE;QACN,cAAc,EAAE,YAAY;QAC5B,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;SACf;KACF;CACF,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const acceptDatetime: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"acceptDatetime\"\n  ],\n  mapper: {\n    serializedName: \"Accept-Datetime\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const after: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"after\"\n  ],\n  mapper: {\n    serializedName: \"After\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const apiVersion: coreHttp.OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    required: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const ifMatch: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"ifMatch\"\n  ],\n  mapper: {\n    serializedName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const ifNoneMatch: coreHttp.OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"ifNoneMatch\"\n  ],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const key0: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"key\"\n  ],\n  mapper: {\n    serializedName: \"key\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const key1: coreHttp.OperationURLParameter = {\n  parameterPath: \"key\",\n  mapper: {\n    required: true,\n    serializedName: \"key\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const label: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"label\"\n  ],\n  mapper: {\n    serializedName: \"label\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const name: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"name\"\n  ],\n  mapper: {\n    serializedName: \"name\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\nexport const select: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"select\"\n  ],\n  mapper: {\n    serializedName: \"$Select\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  },\n  collectionFormat: coreHttp.QueryCollectionFormat.Csv\n};\nexport const syncToken: coreHttp.OperationParameter = {\n  parameterPath: \"syncToken\",\n  mapper: {\n    serializedName: \"Sync-Token\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n"]}