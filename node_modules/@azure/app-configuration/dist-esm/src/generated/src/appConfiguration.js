/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AppConfigurationContext } from "./appConfigurationContext";
class AppConfiguration extends AppConfigurationContext {
    /**
     * Initializes a new instance of the AppConfiguration class.
     * @param apiVersion The API version to be used with the HTTP request.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials, apiVersion, options) {
        super(credentials, apiVersion, options);
    }
    getKeys(options, callback) {
        return this.sendOperationRequest({
            options
        }, getKeysOperationSpec, callback);
    }
    checkKeys(options, callback) {
        return this.sendOperationRequest({
            options
        }, checkKeysOperationSpec, callback);
    }
    getKeyValues(options, callback) {
        return this.sendOperationRequest({
            options
        }, getKeyValuesOperationSpec, callback);
    }
    checkKeyValues(options, callback) {
        return this.sendOperationRequest({
            options
        }, checkKeyValuesOperationSpec, callback);
    }
    getKeyValue(key, options, callback) {
        return this.sendOperationRequest({
            key,
            options
        }, getKeyValueOperationSpec, callback);
    }
    putKeyValue(key, options, callback) {
        return this.sendOperationRequest({
            key,
            options
        }, putKeyValueOperationSpec, callback);
    }
    deleteKeyValue(key, options, callback) {
        return this.sendOperationRequest({
            key,
            options
        }, deleteKeyValueOperationSpec, callback);
    }
    checkKeyValue(key, options, callback) {
        return this.sendOperationRequest({
            key,
            options
        }, checkKeyValueOperationSpec, callback);
    }
    getLabels(options, callback) {
        return this.sendOperationRequest({
            options
        }, getLabelsOperationSpec, callback);
    }
    checkLabels(options, callback) {
        return this.sendOperationRequest({
            options
        }, checkLabelsOperationSpec, callback);
    }
    putLock(key, options, callback) {
        return this.sendOperationRequest({
            key,
            options
        }, putLockOperationSpec, callback);
    }
    deleteLock(key, options, callback) {
        return this.sendOperationRequest({
            key,
            options
        }, deleteLockOperationSpec, callback);
    }
    getRevisions(options, callback) {
        return this.sendOperationRequest({
            options
        }, getRevisionsOperationSpec, callback);
    }
    checkRevisions(options, callback) {
        return this.sendOperationRequest({
            options
        }, checkRevisionsOperationSpec, callback);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getKeysOperationSpec = {
    httpMethod: "GET",
    path: "keys",
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KeyListResult,
            headersMapper: Mappers.GetKeysHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer
};
const checkKeysOperationSpec = {
    httpMethod: "HEAD",
    path: "keys",
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    responses: {
        200: {
            headersMapper: Mappers.CheckKeysHeaders
        },
        default: {}
    },
    serializer
};
const getKeyValuesOperationSpec = {
    httpMethod: "GET",
    path: "kv",
    queryParameters: [
        Parameters.key0,
        Parameters.label,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KeyValueListResult,
            headersMapper: Mappers.GetKeyValuesHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer
};
const checkKeyValuesOperationSpec = {
    httpMethod: "HEAD",
    path: "kv",
    queryParameters: [
        Parameters.key0,
        Parameters.label,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    responses: {
        200: {
            headersMapper: Mappers.CheckKeyValuesHeaders
        },
        default: {}
    },
    serializer
};
const getKeyValueOperationSpec = {
    httpMethod: "GET",
    path: "kv/{key}",
    urlParameters: [
        Parameters.key1
    ],
    queryParameters: [
        Parameters.label,
        Parameters.apiVersion,
        Parameters.select
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KeyValue,
            headersMapper: Mappers.GetKeyValueHeaders
        },
        304: {
            headersMapper: Mappers.GetKeyValueHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer
};
const putKeyValueOperationSpec = {
    httpMethod: "PUT",
    path: "kv/{key}",
    urlParameters: [
        Parameters.key1
    ],
    queryParameters: [
        Parameters.label,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    requestBody: {
        parameterPath: [
            "options",
            "entity"
        ],
        mapper: Mappers.KeyValue
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyValue,
            headersMapper: Mappers.PutKeyValueHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer
};
const deleteKeyValueOperationSpec = {
    httpMethod: "DELETE",
    path: "kv/{key}",
    urlParameters: [
        Parameters.key1
    ],
    queryParameters: [
        Parameters.label,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KeyValue,
            headersMapper: Mappers.DeleteKeyValueHeaders
        },
        204: {
            headersMapper: Mappers.DeleteKeyValueHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer
};
const checkKeyValueOperationSpec = {
    httpMethod: "HEAD",
    path: "kv/{key}",
    urlParameters: [
        Parameters.key1
    ],
    queryParameters: [
        Parameters.label,
        Parameters.apiVersion,
        Parameters.select
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    responses: {
        200: {
            headersMapper: Mappers.CheckKeyValueHeaders
        },
        304: {
            headersMapper: Mappers.CheckKeyValueHeaders
        },
        default: {}
    },
    serializer
};
const getLabelsOperationSpec = {
    httpMethod: "GET",
    path: "labels",
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    responses: {
        200: {
            bodyMapper: Mappers.LabelListResult,
            headersMapper: Mappers.GetLabelsHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer
};
const checkLabelsOperationSpec = {
    httpMethod: "HEAD",
    path: "labels",
    queryParameters: [
        Parameters.name,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    responses: {
        200: {
            headersMapper: Mappers.CheckLabelsHeaders
        },
        default: {}
    },
    serializer
};
const putLockOperationSpec = {
    httpMethod: "PUT",
    path: "locks/{key}",
    urlParameters: [
        Parameters.key1
    ],
    queryParameters: [
        Parameters.label,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KeyValue,
            headersMapper: Mappers.PutLockHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer
};
const deleteLockOperationSpec = {
    httpMethod: "DELETE",
    path: "locks/{key}",
    urlParameters: [
        Parameters.key1
    ],
    queryParameters: [
        Parameters.label,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.ifMatch,
        Parameters.ifNoneMatch
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KeyValue,
            headersMapper: Mappers.DeleteLockHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer
};
const getRevisionsOperationSpec = {
    httpMethod: "GET",
    path: "revisions",
    queryParameters: [
        Parameters.key0,
        Parameters.label,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KeyValueListResult,
            headersMapper: Mappers.GetRevisionsHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer
};
const checkRevisionsOperationSpec = {
    httpMethod: "HEAD",
    path: "revisions",
    queryParameters: [
        Parameters.key0,
        Parameters.label,
        Parameters.apiVersion,
        Parameters.after,
        Parameters.select
    ],
    headerParameters: [
        Parameters.syncToken,
        Parameters.acceptDatetime
    ],
    responses: {
        200: {
            headersMapper: Mappers.CheckRevisionsHeaders
        },
        default: {}
    },
    serializer
};
export { AppConfiguration, AppConfigurationContext, Models as AppConfigurationModels, Mappers as AppConfigurationMappers };
//# sourceMappingURL=appConfiguration.js.map