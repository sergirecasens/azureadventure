{"version":3,"file":"appConfigurationContext.js","sourceRoot":"","sources":["../../../../src/generated/src/appConfigurationContext.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAEH,OAAO,KAAK,QAAQ,MAAM,kBAAkB,CAAC;AAG7C,MAAM,OAAO,uBAAwB,SAAQ,QAAQ,CAAC,aAAa;IAKjE;;;;;OAKG;IACH,YACE,WAAyE,EACzE,UAAkB,EAClB,OAAwC;QAExC,IAAI,UAAU,IAAI,SAAS,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACjD;QACD,IAAI,WAAW,IAAI,SAAS,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,EAAE,CAAC;SACd;QAED,KAAK,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAE5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,kBAAkB,CAAC;QACrE,IAAI,CAAC,kBAAkB,GAAG,iCAAiC,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,OAAO,CAAC,SAAS,KAAK,IAAI,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE;YACjE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;SACpC;IACH,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"./models\";\n\nexport class AppConfigurationContext extends coreHttp.ServiceClient {\n  syncToken?: string;\n  apiVersion: string;\n  credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the AppConfigurationContext class.\n   * @param apiVersion The API version to be used with the HTTP request.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(\n    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,\n    apiVersion: string,\n    options?: Models.AppConfigurationOptions\n  ) {\n    if (apiVersion == undefined) {\n      throw new Error(\"'apiVersion' cannot be null.\");\n    }\n    if (credentials == undefined) {\n      throw new Error(\"'credentials' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    super(credentials, options);\n\n    this.baseUri = options.baseUri || this.baseUri || \"http://localhost\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.apiVersion = apiVersion;\n    this.credentials = credentials;\n    if (options.syncToken !== null && options.syncToken !== undefined) {\n      this.syncToken = options.syncToken;\n    }\n  }\n}\n"]}