{"version":3,"file":"throttlingRetryPolicy.js","sourceRoot":"","sources":["../../../src/policies/throttlingRetryPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyOptions,\n  RequestPolicyFactory,\n  WebResource,\n  HttpOperationResponse,\n  Constants,\n  delay,\n  RestError\n} from \"@azure/core-http\";\n\n/**\n * @internal\n * @ignore\n */\nexport function throttlingRetryPolicy(): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\n\n/**\n * This policy is a close copy of the ThrottlingRetryPolicy class from\n * core-http with modifications to work with how AppConfig is currently\n * responding to 429 responses (which is to throw a RestError).\n *\n * @internal\n * @ignore\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  public async sendRequest(httpRequest: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(httpRequest.clone()).catch((err) => {\n      if (isRestErrorWithHeaders(err)) {\n        const delayInMs = getDelayInMs(err.response.headers);\n\n        if (delayInMs == null) {\n          throw err;\n        }\n\n        return delay(delayInMs).then((_: any) => this.sendRequest(httpRequest.clone()));\n      } else {\n        throw err;\n      }\n    });\n  }\n\n  static parseRetryAfterHeader(headerValue: string): number | undefined {\n    const retryAfterInSeconds = Number(headerValue);\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  static parseDateRetryAfterHeader(headerValue: string): number | undefined {\n    try {\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry (in milliseconds).\n */\nconst RetryAfterMillisecondsHeaders: string[] = [\"retry-after-ms\", \"x-ms-retry-after-ms\"];\n\n/**\n * Extracts the retry response header, checking against several\n * header names.\n * @internal\n * @ignore\n */\nexport function getDelayInMs(responseHeaders: {\n  get: (headerName: string) => string | undefined;\n}): number | undefined {\n  for (const name of RetryAfterMillisecondsHeaders) {\n    const delayValueString = responseHeaders.get(name);\n\n    if (delayValueString == null) {\n      continue;\n    }\n\n    const delayValueMs: number = Number(delayValueString);\n\n    if (Number.isNaN(delayValueMs)) {\n      return undefined;\n    }\n\n    return delayValueMs;\n  }\n\n  const retryAfterValue = responseHeaders.get(Constants.HeaderConstants.RETRY_AFTER);\n\n  if (retryAfterValue != null) {\n    return ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterValue);\n  }\n\n  return undefined;\n}\n\ntype RestErrorWithHeaders = Pick<RestError, Exclude<keyof RestError, \"response\">> & {\n  response: HttpOperationResponse;\n};\n\nfunction isRestErrorWithHeaders(err: any): err is RestErrorWithHeaders {\n  return (\n    err &&\n    err.statusCode &&\n    typeof err.statusCode === \"number\" &&\n    err.response &&\n    err.response.headers &&\n    typeof err.response.headers.get === \"function\"\n  );\n}\n"]}