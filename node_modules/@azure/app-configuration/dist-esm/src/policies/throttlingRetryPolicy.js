// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __awaiter } from "tslib";
import { BaseRequestPolicy, Constants, delay } from "@azure/core-http";
/**
 * @internal
 * @ignore
 */
export function throttlingRetryPolicy() {
    return {
        create: (nextPolicy, options) => {
            return new ThrottlingRetryPolicy(nextPolicy, options);
        }
    };
}
/**
 * This policy is a close copy of the ThrottlingRetryPolicy class from
 * core-http with modifications to work with how AppConfig is currently
 * responding to 429 responses (which is to throw a RestError).
 *
 * @internal
 * @ignore
 */
export class ThrottlingRetryPolicy extends BaseRequestPolicy {
    constructor(nextPolicy, options) {
        super(nextPolicy, options);
    }
    sendRequest(httpRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._nextPolicy.sendRequest(httpRequest.clone()).catch((err) => {
                if (isRestErrorWithHeaders(err)) {
                    const delayInMs = getDelayInMs(err.response.headers);
                    if (delayInMs == null) {
                        throw err;
                    }
                    return delay(delayInMs).then((_) => this.sendRequest(httpRequest.clone()));
                }
                else {
                    throw err;
                }
            });
        });
    }
    static parseRetryAfterHeader(headerValue) {
        const retryAfterInSeconds = Number(headerValue);
        if (Number.isNaN(retryAfterInSeconds)) {
            return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);
        }
        else {
            return retryAfterInSeconds * 1000;
        }
    }
    static parseDateRetryAfterHeader(headerValue) {
        try {
            const now = Date.now();
            const date = Date.parse(headerValue);
            const diff = date - now;
            return Number.isNaN(diff) ? undefined : diff;
        }
        catch (error) {
            return undefined;
        }
    }
}
/**
 * The headers that come back from Azure services representing
 * the amount of time (minimum) to wait to retry (in milliseconds).
 */
const RetryAfterMillisecondsHeaders = ["retry-after-ms", "x-ms-retry-after-ms"];
/**
 * Extracts the retry response header, checking against several
 * header names.
 * @internal
 * @ignore
 */
export function getDelayInMs(responseHeaders) {
    for (const name of RetryAfterMillisecondsHeaders) {
        const delayValueString = responseHeaders.get(name);
        if (delayValueString == null) {
            continue;
        }
        const delayValueMs = Number(delayValueString);
        if (Number.isNaN(delayValueMs)) {
            return undefined;
        }
        return delayValueMs;
    }
    const retryAfterValue = responseHeaders.get(Constants.HeaderConstants.RETRY_AFTER);
    if (retryAfterValue != null) {
        return ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterValue);
    }
    return undefined;
}
function isRestErrorWithHeaders(err) {
    return (err &&
        err.statusCode &&
        typeof err.statusCode === "number" &&
        err.response &&
        err.response.headers &&
        typeof err.response.headers.get === "function");
}
//# sourceMappingURL=throttlingRetryPolicy.js.map