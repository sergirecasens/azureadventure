// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
import { URLBuilder } from "@azure/core-http";
import { sha256Digest, sha256Hmac } from "./internal/cryptoHelpers";
/**
 * @internal
 * @ignore
 */
export class AppConfigCredential {
    constructor(credential, secret) {
        this.credential = credential;
        this.secret = secret;
    }
    /**
     * Signs a request with the values provided in the credential and secret parameter.
     *
     * @param {WebResource} webResource The WebResource to be signed.
     * @returns {Promise<WebResource>} The signed request object.
     */
    signRequest(webResource) {
        return __awaiter(this, void 0, void 0, function* () {
            const verb = webResource.method.toUpperCase();
            const utcNow = new Date().toUTCString();
            const contentHash = yield sha256Digest(webResource.body || "");
            const signedHeaders = "x-ms-date;host;x-ms-content-sha256";
            const url = URLBuilder.parse(webResource.url);
            const query = url.getQuery();
            const urlPathAndQuery = `${url.getPath()}${query ? "?" + query : ""}`;
            const stringToSign = `${verb}\n${urlPathAndQuery}\n${utcNow};${url.getHost()};${contentHash}`;
            const signature = yield sha256Hmac(this.secret, stringToSign);
            webResource.headers.set("x-ms-date", utcNow);
            webResource.headers.set("x-ms-content-sha256", contentHash);
            webResource.headers.set("Authorization", `HMAC-SHA256 Credential=${this.credential}, SignedHeaders=${signedHeaders}, Signature=${signature}`);
            return webResource;
        });
    }
}
//# sourceMappingURL=appConfigCredential.js.map