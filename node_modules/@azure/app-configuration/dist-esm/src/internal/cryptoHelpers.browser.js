// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
/// <reference lib="dom"/>
/**
 * @internal
 * @ignore
 */
export function sha256Digest(body) {
    return __awaiter(this, void 0, void 0, function* () {
        const digest = yield self.crypto.subtle.digest("SHA-256", new TextEncoder().encode(body || ""));
        // The conversions here are a bit odd but necessary (see "Unicode strings" in the link below)
        // https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa
        return btoa(String.fromCharCode(...new Uint8Array(digest)));
    });
}
/**
 * @internal
 * @ignore
 */
export function sha256Hmac(secret, stringToSign) {
    return __awaiter(this, void 0, void 0, function* () {
        const key = yield self.crypto.subtle.importKey("raw", Uint8Array.from(atob(secret), (c) => c.charCodeAt(0)), {
            name: "HMAC",
            hash: "SHA-256"
        }, false, ["sign"]);
        const sigArray = yield self.crypto.subtle.sign("HMAC", key, new TextEncoder().encode(stringToSign));
        return btoa(String.fromCharCode(...new Uint8Array(sigArray)));
    });
}
//# sourceMappingURL=cryptoHelpers.browser.js.map