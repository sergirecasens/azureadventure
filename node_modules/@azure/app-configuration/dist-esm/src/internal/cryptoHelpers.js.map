{"version":3,"file":"cryptoHelpers.js","sourceRoot":"","sources":["../../../src/internal/cryptoHelpers.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AAEhD;;;GAGG;AACH,MAAM,UAAgB,YAAY,CAAC,IAAwB;;QACzD,OAAO,UAAU,CAAC,QAAQ,CAAC;aACxB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;aAClB,MAAM,CAAC,QAAQ,CAAC,CAAC;IACtB,CAAC;CAAA;AAED;;;GAGG;AACH,MAAM,UAAgB,UAAU,CAAC,MAAc,EAAE,YAAoB;;QACnE,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpD,OAAO,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC;aACvC,MAAM,CAAC,YAAY,CAAC;aACpB,MAAM,CAAC,QAAQ,CAAC,CAAC;IACtB,CAAC;CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createHash, createHmac } from \"crypto\";\n\n/**\n * @internal\n * @ignore\n */\nexport async function sha256Digest(body: string | undefined): Promise<string> {\n  return createHash(\"sha256\")\n    .update(body || \"\")\n    .digest(\"base64\");\n}\n\n/**\n * @internal\n * @ignore\n */\nexport async function sha256Hmac(secret: string, stringToSign: string): Promise<string> {\n  const decodedSecret = Buffer.from(secret, \"base64\");\n\n  return createHmac(\"sha256\", decodedSecret)\n    .update(stringToSign)\n    .digest(\"base64\");\n}\n"]}