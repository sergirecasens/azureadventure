{"version":3,"file":"tracingHelpers.js","sourceRoot":"","sources":["../../../src/internal/tracingHelpers.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAQ,QAAQ,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAGnE,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAU7C;;;GAGG;AACH,MAAM,OAAO,OAAO;IAClB,YAAoB,iBAAyB;QAAzB,sBAAiB,GAAjB,iBAAiB,CAAQ;IAAG,CAAC;IAEjD;;;;;;;OAOG;IACG,KAAK,CACT,aAA4B,EAC5B,OAAiB,EACjB,EAAuD,EACvD,6BAA4D,OAAO,CAAC,gBAAgB;;YAEpF,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAW,OAAO,EAAE,aAAa,CAAC,CAAC;YAE/E,IAAI;gBACF,OAAO,MAAM,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aACnC;YAAC,OAAO,GAAG,EAAE;gBACZ,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,0BAA0B,CAAC,GAAG,CAAC;oBACrC,OAAO,EAAE,GAAG,CAAC,OAAO;iBACrB,CAAC,CAAC;gBACH,MAAM,GAAG,CAAC;aACX;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAEO,UAAU,CAAsB,OAAU,EAAE,aAA4B;QAC9E,MAAM,IAAI,GAAG,SAAS,EAAE,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,iBAAiB,IAAI,aAAa,EAAE,kCAC1E,OAAO,CAAC,WAAW,KACtB,IAAI,EAAE,QAAQ,CAAC,QAAQ,IACvB,CAAC;QACH,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,4BAA4B,CAAC,CAAC;QAEhE,IAAI,UAAU,GAAG,OAAO,CAAC;QAEzB,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;YACtB,UAAU,GAAG,OAAO,CAAC,kBAAkB,CAAI,OAAO,EAAE,IAAI,CAAC,CAAC;SAC3D;QACD,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,GAAU;QAChC,IAAI,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;YAC5B,QAAQ,GAAG,CAAC,UAAU,EAAE;gBACtB,KAAK,GAAG;oBACN,OAAO,aAAa,CAAC,iBAAiB,CAAC;gBACzC,KAAK,GAAG;oBACN,OAAO,aAAa,CAAC,SAAS,CAAC;gBACjC,KAAK,GAAG;oBACN,OAAO,aAAa,CAAC,mBAAmB,CAAC;aAC5C;SACF;QAED,OAAO,aAAa,CAAC,OAAO,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAU;QAC3B,OAAO,GAAG,YAAY,SAAS,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAsB,OAAU,EAAE,IAAU;QACnE,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC;QAC9C,uCACK,OAAO,KACV,WAAW,kCACN,WAAW,KACd,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,EACtB,UAAU,kCACL,WAAW,CAAC,UAAU,KACzB,cAAc,EAAE,4BAA4B,UAGhD;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { getTracer } from \"@azure/core-tracing\";\nimport { Span, SpanKind, CanonicalCode } from \"@opentelemetry/api\";\nimport { SpanOptions } from \"@azure/core-tracing\";\n\nimport { RestError } from \"@azure/core-http\";\n\n/**\n * @internal\n * @ignore\n */\nexport interface Spannable {\n  spanOptions?: SpanOptions;\n}\n\n/**\n * @internal\n * @ignore\n */\nexport class Spanner<TClient> {\n  constructor(private baseOperationName: string) {}\n\n  /**\n   * Traces an operation and properly handles reporting start, end and errors for a given span\n   *\n   * @param operationName Name of a method in the TClient type\n   * @param options An options class, typically derived from @azure/core-http/RequestOptionsBase\n   * @param fn The function to call with an options class that properly propagates the span context\n   * @param translateToCanonicalCodeFn An optional function to translate thrown errors into a CanonicalCode for the span\n   */\n  async trace<OptionsT extends Spannable, ReturnT>(\n    operationName: keyof TClient,\n    options: OptionsT,\n    fn: (options: OptionsT, span: Span) => Promise<ReturnT>,\n    translateToCanonicalCodeFn: (err: Error) => CanonicalCode = Spanner.getCanonicalCode\n  ): Promise<ReturnT> {\n    const { newOptions, span } = this.createSpan<OptionsT>(options, operationName);\n\n    try {\n      return await fn(newOptions, span);\n    } catch (err) {\n      span.setStatus({\n        code: translateToCanonicalCodeFn(err),\n        message: err.message\n      });\n      throw err;\n    } finally {\n      span.end();\n    }\n  }\n\n  private createSpan<T extends Spannable>(options: T, operationName: keyof TClient) {\n    const span = getTracer().startSpan(`${this.baseOperationName}.${operationName}`, {\n      ...options.spanOptions,\n      kind: SpanKind.INTERNAL\n    });\n    span.setAttribute(\"az.namespace\", \"Microsoft.AppConfiguration\");\n\n    let newOptions = options;\n\n    if (span.isRecording()) {\n      newOptions = Spanner.addParentToOptions<T>(options, span);\n    }\n    return { span, newOptions };\n  }\n\n  static getCanonicalCode(err: Error) {\n    if (Spanner.isRestError(err)) {\n      switch (err.statusCode) {\n        case 401:\n          return CanonicalCode.PERMISSION_DENIED;\n        case 404:\n          return CanonicalCode.NOT_FOUND;\n        case 412:\n          return CanonicalCode.FAILED_PRECONDITION;\n      }\n    }\n\n    return CanonicalCode.UNKNOWN;\n  }\n\n  static isRestError(err: Error): err is RestError {\n    return err instanceof RestError;\n  }\n\n  static addParentToOptions<T extends Spannable>(options: T, span: Span): T {\n    const spanOptions = options.spanOptions || {};\n    return {\n      ...options,\n      spanOptions: {\n        ...spanOptions,\n        parent: span.context(),\n        attributes: {\n          ...spanOptions.attributes,\n          \"az.namespace\": \"Microsoft.AppConfiguration\"\n        }\n      }\n    };\n  }\n}\n"]}