// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __awaiter } from "tslib";
import { getTracer } from "@azure/core-tracing";
import { SpanKind, CanonicalCode } from "@opentelemetry/api";
import { RestError } from "@azure/core-http";
/**
 * @internal
 * @ignore
 */
export class Spanner {
    constructor(baseOperationName) {
        this.baseOperationName = baseOperationName;
    }
    /**
     * Traces an operation and properly handles reporting start, end and errors for a given span
     *
     * @param operationName Name of a method in the TClient type
     * @param options An options class, typically derived from @azure/core-http/RequestOptionsBase
     * @param fn The function to call with an options class that properly propagates the span context
     * @param translateToCanonicalCodeFn An optional function to translate thrown errors into a CanonicalCode for the span
     */
    trace(operationName, options, fn, translateToCanonicalCodeFn = Spanner.getCanonicalCode) {
        return __awaiter(this, void 0, void 0, function* () {
            const { newOptions, span } = this.createSpan(options, operationName);
            try {
                return yield fn(newOptions, span);
            }
            catch (err) {
                span.setStatus({
                    code: translateToCanonicalCodeFn(err),
                    message: err.message
                });
                throw err;
            }
            finally {
                span.end();
            }
        });
    }
    createSpan(options, operationName) {
        const span = getTracer().startSpan(`${this.baseOperationName}.${operationName}`, Object.assign(Object.assign({}, options.spanOptions), { kind: SpanKind.INTERNAL }));
        span.setAttribute("az.namespace", "Microsoft.AppConfiguration");
        let newOptions = options;
        if (span.isRecording()) {
            newOptions = Spanner.addParentToOptions(options, span);
        }
        return { span, newOptions };
    }
    static getCanonicalCode(err) {
        if (Spanner.isRestError(err)) {
            switch (err.statusCode) {
                case 401:
                    return CanonicalCode.PERMISSION_DENIED;
                case 404:
                    return CanonicalCode.NOT_FOUND;
                case 412:
                    return CanonicalCode.FAILED_PRECONDITION;
            }
        }
        return CanonicalCode.UNKNOWN;
    }
    static isRestError(err) {
        return err instanceof RestError;
    }
    static addParentToOptions(options, span) {
        const spanOptions = options.spanOptions || {};
        return Object.assign(Object.assign({}, options), { spanOptions: Object.assign(Object.assign({}, spanOptions), { parent: span.context(), attributes: Object.assign(Object.assign({}, spanOptions.attributes), { "az.namespace": "Microsoft.AppConfiguration" }) }) });
    }
}
//# sourceMappingURL=tracingHelpers.js.map