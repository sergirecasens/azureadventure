{"version":3,"file":"auth.spec.js","sourceRoot":"","sources":["../../test/auth.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,sBAAsB,EAAE,MAAM,QAAQ,CAAC;AAChD,OAAO,EAAE,aAAa,EAAE,gCAAgC,EAAoB,MAAM,eAAe,CAAC;AAClG,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,EAAY,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAEtE,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,gBAAkC,CAAC;IACvC,IAAI,QAAkB,CAAC;IAEvB,UAAU,CAAC;QACT,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;QAC/B,gBAAgB,GAAG,gCAAgC,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC;QACR,QAAQ,CAAC,IAAI,EAAE,CAAC;IAClB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,CAAC,MAAM,CACX,GAAG,EAAE,CAAC,IAAI,sBAAsB,CAAC,8BAA8B,CAAC,EAChE,6HAA6H,CAC9H,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE;;YAC/B,IAAI,cAAc,EAAE,EAAE;gBACpB,IAAI,CAAC,IAAI,EAAE,CAAC;aACb;YACD,MAAM,MAAM,GAAG,IAAI,sBAAsB,CACvC,gBAAgB,CAAC,QAAQ,EACzB,gBAAgB,CAAC,UAAU,CAC5B,CAAC;YAEF,4DAA4D;YAC5D,uCAAuC;YACvC,MAAM,MAAM,CAAC,uBAAuB,CAAC;gBACnC,GAAG,EAAE,6BAA6B,IAAI,CAAC,GAAG,EAAE,EAAE;gBAC9C,KAAK,EAAE,OAAO;aACf,CAAC,CAAC;QACL,CAAC;KAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AppConfigurationClient } from \"../src\";\nimport { startRecorder, getTokenAuthenticationCredential, CredsAndEndpoint } from \"./testHelpers\";\nimport * as assert from \"assert\";\nimport { Recorder, isPlaybackMode } from \"@azure/test-utils-recorder\";\n\ndescribe(\"Authentication\", () => {\n  let credsAndEndpoint: CredsAndEndpoint;\n  let recorder: Recorder;\n\n  beforeEach(function() {\n    recorder = startRecorder(this);\n    credsAndEndpoint = getTokenAuthenticationCredential() || this.skip();\n  });\n\n  afterEach(function() {\n    recorder.stop();\n  });\n\n  it(\"invalid connection string gives a decent error message\", () => {\n    assert.throws(\n      () => new AppConfigurationClient(\"an invalid connection string\"),\n      /Invalid connection string\\. Valid connection strings should match the regex 'Endpoint=\\(\\.\\*\\);Id=\\(\\.\\*\\);Secret=\\(\\.\\*\\)'/\n    );\n  });\n\n  it(\"token authentication works\", async function() {\n    if (isPlaybackMode()) {\n      this.skip();\n    }\n    const client = new AppConfigurationClient(\n      credsAndEndpoint.endpoint,\n      credsAndEndpoint.credential\n    );\n\n    // it doesn't matter if any data comes in so long as we were\n    // able to connect and call the service\n    await client.addConfigurationSetting({\n      key: `token-authentication-test-${Date.now()}`,\n      value: \"hello\"\n    });\n  });\n});\n"]}