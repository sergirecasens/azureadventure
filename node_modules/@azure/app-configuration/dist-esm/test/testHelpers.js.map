{"version":3,"file":"testHelpers.js","sourceRoot":"","sources":["../../test/testHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AppConfigurationClient } from \"../src\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { ConfigurationSetting, ListConfigurationSettingPage, ListRevisionsPage } from \"../src\";\nimport { env, isPlaybackMode, RecorderEnvironmentSetup, record } from \"@azure/test-utils-recorder\";\nimport * as assert from \"assert\";\n\n// allow loading from a .env file as an alternative to defining the variable\n// in the environment\nimport * as dotenv from \"dotenv\";\nimport { RestError } from \"@azure/core-http\";\nimport { DefaultAzureCredential, TokenCredential } from \"@azure/identity\";\nimport { InternalAppConfigurationClientOptions } from \"../src/appConfigurationClient\";\ndotenv.config();\n\nlet connectionStringNotPresentWarning = false;\nlet tokenCredentialsNotPresentWarning = false;\n\nexport interface CredsAndEndpoint {\n  credential: TokenCredential;\n  endpoint: string;\n}\n\nexport function startRecorder(that: any) {\n  const recorderEnvSetup: RecorderEnvironmentSetup = {\n    replaceableVariables: {\n      AZ_CONFIG_CONNECTION: \"Endpoint=https://myappconfig.azconfig.io;Id=123456;Secret=123456\",\n      AZ_CONFIG_ENDPOINT: \"https://myappconfig.azconfig.io\",\n      AZURE_CLIENT_ID: \"azure_client_id\",\n      AZURE_CLIENT_SECRET: \"azure_client_secret\",\n      AZURE_TENANT_ID: \"azure_tenant_id\"\n    },\n    customizationsOnRecordings: [\n      (recording: any): any =>\n        recording.replace(/\"access_token\":\"[^\"]*\"/g, `\"access_token\":\"access_token\"`)\n    ],\n    queryParametersToSkip: []\n  };\n\n  return record(that, recorderEnvSetup);\n}\n\nexport function getTokenAuthenticationCredential(): CredsAndEndpoint | undefined {\n  const requiredEnvironmentVariables = [\n    \"AZ_CONFIG_ENDPOINT\",\n    \"AZURE_CLIENT_ID\",\n    \"AZURE_TENANT_ID\",\n    \"AZURE_CLIENT_SECRET\"\n  ];\n\n  for (const name of requiredEnvironmentVariables) {\n    const value = env[name];\n\n    if (value == null) {\n      if (tokenCredentialsNotPresentWarning) {\n        tokenCredentialsNotPresentWarning = true;\n        console.log(\"Functional tests not running - set client identity variables to activate\");\n      }\n\n      return undefined;\n    }\n  }\n\n  return {\n    credential: new DefaultAzureCredential(),\n    endpoint: env[\"AZ_CONFIG_ENDPOINT\"]!\n  };\n}\n\nexport function createAppConfigurationClientForTests(\n  options?: InternalAppConfigurationClientOptions\n): AppConfigurationClient | undefined {\n  const connectionString = env[\"AZ_CONFIG_CONNECTION\"];\n\n  if (connectionString == null) {\n    if (!connectionStringNotPresentWarning) {\n      connectionStringNotPresentWarning = true;\n      console.log(\n        \"Functional tests not running - set AZ_CONFIG_CONNECTION to a valid AppConfig connection string to activate\"\n      );\n    }\n    return undefined;\n  }\n\n  return new AppConfigurationClient(connectionString, options);\n}\n\nexport async function deleteKeyCompletely(keys: string[], client: AppConfigurationClient) {\n  const settingsIterator = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\")\n  });\n\n  for await (const setting of settingsIterator) {\n    if (setting.isReadOnly) {\n      await client.setReadOnly(setting, false);\n    }\n\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\nexport async function toSortedArray(\n  pagedIterator: PagedAsyncIterableIterator<\n    ConfigurationSetting,\n    ListConfigurationSettingPage | ListRevisionsPage\n  >,\n  compareFn?: (a: ConfigurationSetting, b: ConfigurationSetting) => number\n): Promise<ConfigurationSetting[]> {\n  const settings: ConfigurationSetting[] = [];\n\n  for await (const setting of pagedIterator) {\n    settings.push(setting);\n  }\n\n  let settingsViaPageIterator: ConfigurationSetting[] = [];\n\n  for await (const page of pagedIterator.byPage()) {\n    settingsViaPageIterator = settingsViaPageIterator.concat(page.items);\n  }\n\n  // just a sanity-check\n  assert.deepEqual(settings, settingsViaPageIterator);\n\n  settings.sort((a, b) =>\n    compareFn\n      ? compareFn(a, b)\n      : `${a.key}-${a.label}-${a.value}`.localeCompare(`${b.key}-${b.label}-${b.value}`)\n  );\n\n  return settings;\n}\n\nexport function assertEqualSettings(\n  expected: Pick<ConfigurationSetting, \"key\" | \"value\" | \"label\" | \"isReadOnly\">[],\n  actual: ConfigurationSetting[]\n) {\n  actual = actual.map((setting) => {\n    return {\n      key: setting.key,\n      label: setting.label,\n      value: setting.value,\n      isReadOnly: setting.isReadOnly\n    };\n  });\n\n  assert.deepEqual(expected, actual);\n}\n\nexport async function assertThrowsRestError(\n  testFunction: () => Promise<any>,\n  expectedStatusCode: number,\n  message: string = \"\"\n): Promise<Error> {\n  try {\n    await testFunction();\n    assert.fail(`${message}: No error thrown`);\n  } catch (err) {\n    if (err instanceof RestError) {\n      assert.equal(expectedStatusCode, err.statusCode, message);\n      return err;\n    }\n\n    assert.fail(`${message}: Caught error but wasn't a RestError: ${err}`);\n  }\n\n  return new Error(\"We won't reach this - both cases above throw because of assert.fail()\");\n}\n\nexport async function assertThrowsAbortError(testFunction: () => Promise<any>, message = \"\") {\n  try {\n    await testFunction();\n    assert.fail(`${message}: No error thrown`);\n  } catch (e) {\n    if (isPlaybackMode() && (e.name === \"FetchError\" || e.name === \"AbortError\")) {\n      return e;\n    } else {\n      assert.equal(e.name, \"AbortError\");\n      return e;\n    }\n  }\n}\n"]}