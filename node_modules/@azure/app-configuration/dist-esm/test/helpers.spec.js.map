{"version":3,"file":"helpers.spec.js","sourceRoot":"","sources":["../../test/helpers.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  checkAndFormatIfAndIfNoneMatch,\n  formatWildcards,\n  extractAfterTokenFromNextLink,\n  quoteETag,\n  makeConfigurationSettingEmpty,\n  transformKeyValue,\n  transformKeyValueResponseWithStatusCode,\n  transformKeyValueResponse\n} from \"../src/internal/helpers\";\nimport * as assert from \"assert\";\nimport { ConfigurationSetting, HttpResponseField, HttpResponseFields } from \"../src\";\nimport { HttpHeaders } from \"@azure/core-http\";\n\ndescribe(\"helper methods\", () => {\n  it(\"checkAndFormatIfAndIfNoneMatch\", () => {\n    const key = \"ignored\";\n\n    assert.deepEqual(\n      {\n        ifMatch: undefined,\n        ifNoneMatch: undefined\n      },\n      checkAndFormatIfAndIfNoneMatch({ key }, {})\n    );\n\n    assert.deepEqual(\n      {\n        ifMatch: '\"hello\"',\n        ifNoneMatch: undefined\n      },\n      checkAndFormatIfAndIfNoneMatch(\n        { key, etag: \"hello\" },\n        {\n          onlyIfUnchanged: true\n        }\n      )\n    );\n\n    assert.deepEqual(\n      {\n        ifNoneMatch: '\"hello\"',\n        ifMatch: undefined\n      },\n      checkAndFormatIfAndIfNoneMatch(\n        { key, etag: \"hello\" },\n        {\n          onlyIfChanged: true\n        }\n      )\n    );\n  });\n\n  it(\"checkAndFormatIfAndIfNoneMatch - mutually exclusive\", () => {\n    const key = \"ignored\";\n\n    assert.throws(\n      () =>\n        checkAndFormatIfAndIfNoneMatch(\n          { key, etag: \"won't get used\" },\n          {\n            onlyIfChanged: true,\n            onlyIfUnchanged: true\n          }\n        ),\n      /onlyIfChanged and onlyIfUnchanged are mutually-exclusive/\n    );\n  });\n\n  describe(\"quoteETag\", () => {\n    it(\"undefined\", () => {\n      assert.equal(undefined, quoteETag(undefined));\n\n      assert.equal('\"etagishere\"', quoteETag(\"etagishere\"));\n\n      assert.equal(\"'etagishere'\", quoteETag(\"'etagishere'\"));\n\n      assert.equal(\"*\", quoteETag(\"*\"));\n    });\n  });\n\n  describe(\"formatWildcards\", () => {\n    it(\"undefined\", () => {\n      const result = formatWildcards({\n        keyFilter: undefined,\n        labelFilter: undefined\n      });\n\n      assert.ok(!result.key);\n      assert.ok(!result.label);\n    });\n\n    it(\"single values only\", () => {\n      const result = formatWildcards({\n        keyFilter: \"key1\",\n        labelFilter: \"label1\"\n      });\n\n      assert.equal(\"key1\", result.key);\n      assert.equal(\"label1\", result.label);\n    });\n\n    it(\"multiple values\", () => {\n      const result = formatWildcards({\n        keyFilter: \"key1,key2\",\n        labelFilter: \"label1,label2\"\n      });\n\n      assert.equal(\"key1,key2\", result.key);\n      assert.equal(\"label1,label2\", result.label);\n    });\n\n    it(\"fields map properly\", () => {\n      const result = formatWildcards({\n        fields: [\"isReadOnly\", \"value\"]\n      });\n\n      assert.deepEqual([\"locked\", \"value\"], result.select);\n    });\n  });\n\n  describe(\"extractAfterTokenFromNextLink\", () => {\n    it(\"token is extracted and properly unescaped\", () => {\n      let token = extractAfterTokenFromNextLink(\"/kv?key=someKey&api-version=1.0&after=bGlah%3D\");\n      assert.equal(\"bGlah=\", token);\n    });\n  });\n\n  it(\"makeConfigurationSettingEmpty\", () => {\n    const response: ConfigurationSetting & HttpResponseField<any> & HttpResponseFields = {\n      key: \"mykey\",\n      statusCode: 204,\n      isReadOnly: false,\n      ...fakeHttp204Response\n    };\n\n    makeConfigurationSettingEmpty(response);\n\n    // key isn't touched\n    assert.equal(\"mykey\", response.key);\n\n    for (const name of getAllConfigurationSettingFields()) {\n      assert.ok(!response[name], name);\n    }\n\n    // These point is these properties are untouched and won't throw\n    // since they're the only properties the user is allowed to touch on these\n    // \"body empty\" objects.\n    assert.equal(204, response._response.status);\n    assert.equal(204, response.statusCode);\n  });\n\n  it(\"transformKeyValue\", () => {\n    const configurationSetting = transformKeyValue({\n      key: \"hello\",\n      locked: true\n    });\n\n    assert.deepEqual(\n      {\n        // the 'locked' property should not be present in the object since\n        // it should be 'renamed' to readOnly\n        isReadOnly: true,\n        key: \"hello\"\n      },\n      configurationSetting\n    );\n  });\n\n  it(\"transformKeyValueResponseWithStatusCode\", () => {\n    const configurationSetting = transformKeyValueResponseWithStatusCode({\n      key: \"hello\",\n      locked: true,\n      ...fakeHttp204Response\n    });\n\n    const actualKeys = Object.keys(configurationSetting).sort();\n\n    // _response is explictly set to not enumerate, even in our copied object.\n    assert.deepEqual([\"isReadOnly\", \"key\", \"statusCode\"], actualKeys);\n\n    // now make it enumerable so we can do our comparison\n    Object.defineProperty(configurationSetting, \"_response\", {\n      enumerable: true\n    });\n\n    assert.deepEqual(\n      {\n        isReadOnly: true,\n        key: \"hello\",\n\n        statusCode: 204,\n        _response: fakeHttp204Response._response\n      },\n      configurationSetting\n    );\n  });\n\n  it(\"transformKeyValueResponse\", () => {\n    const configurationSetting = transformKeyValueResponse({\n      key: \"hello\",\n      locked: true,\n      ...fakeHttp204Response\n    });\n\n    const actualKeys = Object.keys(configurationSetting).sort();\n\n    // _response is explictly set to not enumerate, even in our copied object.\n    assert.deepEqual([\"isReadOnly\", \"key\"], actualKeys);\n\n    // now make it enumerable so we can do our comparison\n    Object.defineProperty(configurationSetting, \"_response\", {\n      enumerable: true\n    });\n\n    assert.deepEqual(\n      {\n        isReadOnly: true,\n        key: \"hello\",\n        _response: fakeHttp204Response._response\n      },\n      configurationSetting\n    );\n  });\n\n  function getAllConfigurationSettingFields(): Exclude<keyof ConfigurationSetting, \"key\">[] {\n    const configObjectWithAllFieldsRequired: Required<ConfigurationSetting> = {\n      contentType: \"\",\n      etag: \"\",\n      key: \"\",\n      label: \"\",\n      lastModified: new Date(),\n      isReadOnly: true,\n      tags: {},\n      value: \"\"\n    };\n\n    const keys = Object.keys(configObjectWithAllFieldsRequired).filter((key) => key !== \"key\");\n    return keys as Exclude<keyof ConfigurationSetting, \"key\">[];\n  }\n\n  const fakeHttp204Response: HttpResponseField<any> = {\n    _response: {\n      request: {\n        url: \"unused\",\n        abortSignal: {\n          aborted: true,\n          addEventListener: () => {},\n          removeEventListener: () => {}\n        },\n        method: \"GET\",\n        withCredentials: false,\n        headers: new HttpHeaders(),\n        timeout: 0,\n        requestId: \"\",\n        clone: function() {\n          return this;\n        },\n        validateRequestProperties: () => {},\n        prepare: function() {\n          return this;\n        }\n      },\n      status: 204,\n      headers: new HttpHeaders(),\n      bodyAsText: \"\",\n      parsedHeaders: {}\n    }\n  };\n});\n"]}