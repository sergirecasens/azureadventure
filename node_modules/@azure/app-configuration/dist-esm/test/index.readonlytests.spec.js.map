{"version":3,"file":"index.readonlytests.spec.js","sourceRoot":"","sources":["../../test/index.readonlytests.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createAppConfigurationClientForTests,\n  assertThrowsRestError,\n  deleteKeyCompletely,\n  assertThrowsAbortError,\n  startRecorder\n} from \"./testHelpers\";\nimport { AppConfigurationClient } from \"../src\";\nimport * as assert from \"assert\";\nimport { Recorder } from \"@azure/test-utils-recorder\";\n\ndescribe(\"AppConfigurationClient (set|clear)ReadOnly\", () => {\n  let client: AppConfigurationClient;\n  let recorder: Recorder;\n  const testConfigSetting = {\n    key: \"\",\n    value: \"world\",\n    label: \"some label\"\n  };\n\n  beforeEach(async function() {\n    recorder = startRecorder(this);\n    testConfigSetting.key = recorder.getUniqueName(\"readOnlyTests\");\n    client = createAppConfigurationClientForTests() || this.skip();\n    // before it's set to read only we can set it all we want\n    await client.setConfigurationSetting(testConfigSetting);\n  });\n\n  afterEach(async function() {\n    await deleteKeyCompletely([testConfigSetting.key], client);\n    recorder.stop();\n  });\n\n  it(\"basic\", async function() {\n    let storedSetting = await client.getConfigurationSetting({\n      key: testConfigSetting.key,\n      label: testConfigSetting.label\n    });\n    assert.ok(!storedSetting.isReadOnly);\n\n    await client.setReadOnly(testConfigSetting, true);\n\n    storedSetting = await client.getConfigurationSetting({\n      key: testConfigSetting.key,\n      label: testConfigSetting.label\n    });\n    assert.ok(storedSetting.isReadOnly);\n\n    // any modification related methods throw exceptions\n    await assertThrowsRestError(\n      () => client.setConfigurationSetting(testConfigSetting),\n      409,\n      \"Set should fail because the setting is read-only\"\n    );\n    await assertThrowsRestError(\n      () =>\n        client.deleteConfigurationSetting({\n          key: testConfigSetting.key,\n          label: testConfigSetting.label\n        }),\n      409,\n      \"Delete should fail because the setting is read-only\"\n    );\n  });\n\n  it(\"accepts operation options\", async function() {\n    await client.getConfigurationSetting({\n      key: testConfigSetting.key,\n      label: testConfigSetting.label\n    });\n\n    await assertThrowsAbortError(async () => {\n      await client.setReadOnly(testConfigSetting, true, { requestOptions: { timeout: 1 } });\n    });\n    await assertThrowsAbortError(async () => {\n      await client.setReadOnly(testConfigSetting, false, { requestOptions: { timeout: 1 } });\n    });\n  });\n});\n"]}