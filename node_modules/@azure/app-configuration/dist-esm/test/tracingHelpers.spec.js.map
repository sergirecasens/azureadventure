{"version":3,"file":"tracingHelpers.spec.js","sourceRoot":"","sources":["../../test/tracingHelpers.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,OAAO,EAAE,MAAM,gCAAgC,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAG7D,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AAOjC,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,WAAW,GAAgB;YAC/B,IAAI,EAAE,UAAU;YAChB,WAAW,EAAE;gBACX,UAAU,EAAE;oBACV,aAAa,EAAE,oBAAoB;iBACpC;aACF;SACF,CAAC;QAEF,MAAM,UAAU,GAAG,SAAS,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE;YAC/C,IAAI,EAAE,QAAQ,CAAC,QAAQ;SACxB,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAE1E,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACtE,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,EAAE,4BAA4B,CAAC,CAAC;QAC3E,IAAI,UAAU,CAAC,WAAW,CAAC,UAAU,EAAE;YACrC,MAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;YAC9F,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;SACxF;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,CAAC,KAAK,CACV,aAAa,CAAC,iBAAiB,EAC/B,OAAO,CAAC,gBAAgB,CAAC,IAAI,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAC1D,CAAC;QACF,MAAM,CAAC,KAAK,CACV,aAAa,CAAC,SAAS,EACvB,OAAO,CAAC,gBAAgB,CAAC,IAAI,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAC1D,CAAC;QACF,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,gBAAgB,CAAC,IAAI,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QAC/F,MAAM,CAAC,KAAK,CACV,aAAa,CAAC,mBAAmB,EACjC,OAAO,CAAC,gBAAgB,CAAC,IAAI,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAC1D,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Spanner } from \"../src/internal/tracingHelpers\";\nimport { RestError } from \"@azure/core-http\";\nimport { getTracer } from \"@azure/core-tracing\";\nimport { SpanKind, CanonicalCode } from \"@opentelemetry/api\";\nimport { SpanOptions } from \"@azure/core-tracing\";\n\nimport * as assert from \"assert\";\n\ninterface FakeOptions {\n  name: string;\n  spanOptions: SpanOptions;\n}\n\ndescribe(\"tracingHelpers\", () => {\n  it(\"addParentToOptions\", () => {\n    const fakeOptions: FakeOptions = {\n      name: \"fakeName\",\n      spanOptions: {\n        attributes: {\n          testAttribute: \"testAttributeValue\"\n        }\n      }\n    };\n\n    const parentSpan = getTracer().startSpan(\"test\", {\n      kind: SpanKind.PRODUCER\n    });\n\n    const newOptions = Spanner[\"addParentToOptions\"](fakeOptions, parentSpan);\n\n    assert.equal(\"fakeName\", newOptions.name);\n    assert.deepEqual(parentSpan.context(), newOptions.spanOptions.parent);\n    assert.ok(newOptions.spanOptions.attributes, \"Should have attributes set\");\n    if (newOptions.spanOptions.attributes) {\n      assert.equal(\"Microsoft.AppConfiguration\", newOptions.spanOptions.attributes[\"az.namespace\"]);\n      assert.equal(\"testAttributeValue\", newOptions.spanOptions.attributes[\"testAttribute\"]);\n    }\n  });\n\n  it(\"getCanonicalCode\", () => {\n    assert.equal(\n      CanonicalCode.PERMISSION_DENIED,\n      Spanner.getCanonicalCode(new RestError(\"hello\", \"\", 401))\n    );\n    assert.equal(\n      CanonicalCode.NOT_FOUND,\n      Spanner.getCanonicalCode(new RestError(\"hello\", \"\", 404))\n    );\n    assert.equal(CanonicalCode.UNKNOWN, Spanner.getCanonicalCode(new RestError(\"hello\", \"\", 409)));\n    assert.equal(\n      CanonicalCode.FAILED_PRECONDITION,\n      Spanner.getCanonicalCode(new RestError(\"hello\", \"\", 412))\n    );\n  });\n});\n"]}