{"version":3,"file":"throwOrNotThrow.spec.js","sourceRoot":"","sources":["../../test/throwOrNotThrow.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppConfigurationClient, ConfigurationSetting } from \"../src\";\nimport {\n  createAppConfigurationClientForTests,\n  deleteKeyCompletely,\n  assertThrowsRestError,\n  startRecorder\n} from \"./testHelpers\";\nimport * as assert from \"assert\";\nimport { Recorder } from \"@azure/test-utils-recorder\";\n\n// There's been discussion on other teams about what errors are thrown when. This\n// is the file where I've documented the throws/notThrows cases to make coordination\n// with other teams simpler. (there's redundancy with other parts of the test suite but\n// that's okay)\ndescribe(\"Various error cases\", () => {\n  let client: AppConfigurationClient;\n  let recorder: Recorder;\n  const nonMatchingETag = \"never-match-etag\";\n\n  beforeEach(function() {\n    recorder = startRecorder(this);\n    client = createAppConfigurationClientForTests() || this.skip();\n  });\n\n  afterEach(function() {\n    recorder.stop();\n  });\n\n  describe(\"throws\", () => {\n    let addedSetting: ConfigurationSetting;\n    let nonExistentKey: string;\n\n    beforeEach(async () => {\n      addedSetting = await client.addConfigurationSetting({\n        key: recorder.getUniqueName(`etags`),\n        value: \"world\"\n      });\n\n      nonExistentKey = \"non-existent key \" + addedSetting.key;\n    });\n\n    afterEach(async function() {\n      if (!this.currentTest?.isPending()) {\n        await deleteKeyCompletely([addedSetting.key], client);\n      }\n    });\n\n    it(\"get: Non-existent key throws 404\", async () => {\n      await assertThrowsRestError(\n        () => client.getConfigurationSetting({ key: nonExistentKey }),\n        404\n      );\n    });\n\n    it(\"add: Setting already exists throws 412\", async () => {\n      await assertThrowsRestError(() => client.addConfigurationSetting(addedSetting), 412);\n    });\n\n    it(\"set: Existing key, (onlyIfUnchanged) throws 412\", async () => {\n      await assertThrowsRestError(\n        () =>\n          client.setConfigurationSetting(\n            {\n              ...addedSetting,\n              etag: nonMatchingETag // purposefully make the etag not match the server\n            },\n            { onlyIfUnchanged: true }\n          ),\n        412\n      );\n    });\n\n    it(\"set: trying to modify a read-only setting throws 409\", async () => {\n      await client.setReadOnly(addedSetting, true);\n\n      await assertThrowsRestError(() => client.setConfigurationSetting(addedSetting), 409);\n    });\n\n    it(\"delete: key that is set to read-only throws 409\", async () => {\n      await client.setReadOnly(addedSetting, true);\n      await assertThrowsRestError(async () => client.deleteConfigurationSetting(addedSetting), 409);\n      await client.setReadOnly(addedSetting, false);\n    });\n  });\n\n  describe(\"doesn't throw\", () => {\n    let addedSetting: ConfigurationSetting;\n    let nonExistentKey: string;\n\n    beforeEach(async () => {\n      // same setup for all tests:\n      // key: hello{date}, value: world\n\n      // the 'no label' value for 'hello'\n      addedSetting = await client.addConfigurationSetting({\n        key: recorder.getUniqueName(`etags`),\n        value: \"world\"\n      });\n\n      nonExistentKey = \"bogus key \" + addedSetting.key;\n    });\n\n    afterEach(async function() {\n      if (!this.currentTest?.isPending()) {\n        await deleteKeyCompletely([addedSetting.key], client);\n      }\n    });\n\n    it(\"get: value is unchanged from etag (304) using ifNoneMatch, sets all properties to undefined\", async () => {\n      const response = await client.getConfigurationSetting(addedSetting, {\n        onlyIfChanged: true\n      });\n\n      assert.equal(304, response.statusCode);\n      assert.ok(!response.value);\n    });\n\n    it(\"delete: non-existent key (no etag)\", async () => {\n      await client.deleteConfigurationSetting({ key: nonExistentKey });\n    });\n  });\n});\n"]}