{"version":3,"file":"defaultAzureCredential.js","sourceRoot":"","sources":["../../../src/credentials/defaultAzureCredential.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAClE,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAAE,yBAAyB,EAAE,MAAM,6BAA6B,CAAC;AACxE,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;AAgB1E;;;;;;;;;;GAUG;AACH,MAAM,OAAO,sBAAuB,SAAQ,sBAAsB;IAChE;;;;OAIG;IACH,YAAY,sBAAsD;QAChE,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,WAAW,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,sBAAsB,CAAC,CAAC,CAAC;QACpE,WAAW,CAAC,IAAI,CAAC,IAAI,yBAAyB,CAAC,sBAAsB,CAAC,CAAC,CAAC;QACxE,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE;YAC/B,WAAW,CAAC,IAAI,CACd,IAAI,yBAAyB,CAAC,CAAA,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,uBAAuB,KAAI,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,sBAAsB,CAAC,CACtI,CAAC;SACH;QACD,WAAW,CAAC,IAAI,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC;QAC3C,WAAW,CAAC,IAAI,CAAC,IAAI,0BAA0B,CAAC,sBAAsB,CAAC,CAAC,CAAC;QAEzE,KAAK,CAAC,GAAG,WAAW,CAAC,CAAC;QACtB,IAAI,CAAC,kBAAkB;YACrB,oFAAoF,CAAC;IACzF,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TokenCredentialOptions } from \"../client/identityClient\";\nimport { ChainedTokenCredential } from \"./chainedTokenCredential\";\nimport { EnvironmentCredential } from \"./environmentCredential\";\nimport { ManagedIdentityCredential } from \"./managedIdentityCredential\";\nimport { AzureCliCredential } from \"./azureCliCredential\";\nimport { VisualStudioCodeCredential } from \"./visualStudioCodeCredential\";\n\n/**\n * Provides options to configure the default Azure credentials.\n */\nexport interface DefaultAzureCredentialOptions extends TokenCredentialOptions {\n  /**\n   * Optionally pass in a Tenant ID to be used as part of the credential\n   */\n  tenantId?: string;\n  /**\n   * Optionally pass in a user assigned client ID for the ManagedIdentityCredential\n   */\n  managedIdentityClientId?: string;\n}\n\n/**\n * Provides a default {@link ChainedTokenCredential} configuration for\n * applications that will be deployed to Azure.  The following credential\n * types will be tried, in order:\n *\n * - {@link EnvironmentCredential}\n * - {@link ManagedIdentityCredential}\n *\n * Consult the documentation of these credential types for more information\n * on how they attempt authentication.\n */\nexport class DefaultAzureCredential extends ChainedTokenCredential {\n  /**\n   * Creates an instance of the DefaultAzureCredential class.\n   *\n   * @param options Options for configuring the client which makes the authentication request.\n   */\n  constructor(tokenCredentialOptions?: DefaultAzureCredentialOptions) {\n    const credentials = [];\n    credentials.push(new EnvironmentCredential(tokenCredentialOptions));\n    credentials.push(new ManagedIdentityCredential(tokenCredentialOptions));\n    if (process.env.AZURE_CLIENT_ID) {\n      credentials.push(\n        new ManagedIdentityCredential(tokenCredentialOptions?.managedIdentityClientId || process.env.AZURE_CLIENT_ID, tokenCredentialOptions)\n      );\n    }\n    credentials.push(new AzureCliCredential());\n    credentials.push(new VisualStudioCodeCredential(tokenCredentialOptions));\n\n    super(...credentials);\n    this.UnavailableMessage =\n      \"DefaultAzureCredential => failed to retrieve a token from the included credentials\";\n  }\n}\n"]}