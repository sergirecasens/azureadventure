{"version":3,"file":"delay.js","sourceRoot":"","sources":["../../../src/util/delay.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,IAAI,YAAwD,CAAC;AAE7D;;;;;GAKG;AACH,MAAM,UAAU,KAAK,CAAC,CAAS;IAC7B,IAAI,YAAY,EAAE;QAChB,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;KACxB;IAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,qBAAqB,CAAC,IAAmC;IACvE,YAAY,GAAG,IAAI,CAAC;AACtB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nlet testFunction: ((t: number) => Promise<void>) | undefined;\n\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @internal\n * @param {number} t The number of milliseconds to be delayed.\n * @returns {Promise<void>} Resolved promise\n */\nexport function delay(t: number): Promise<void> {\n  if (testFunction) {\n    return testFunction(t);\n  }\n\n  return new Promise((resolve) => setTimeout(() => resolve(), t));\n}\n\n/**\n * @internal\n */\nexport function _setDelayTestFunction(func?: (t: number) => Promise<void>): void {\n  testFunction = func;\n}\n"]}