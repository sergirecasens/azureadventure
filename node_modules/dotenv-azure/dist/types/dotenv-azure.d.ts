import dotenv, { DotenvParseOptions, DotenvParseOutput } from 'dotenv';
import { SecretClient } from '@azure/keyvault-secrets';
import { AppConfigurationClient, ConfigurationSetting } from '@azure/app-configuration';
import { DotenvAzureOptions, DotenvAzureConfigOptions, DotenvAzureConfigOutput, DotenvAzureParseOutput, VariablesObject, AzureCredentials, AppConfigurations, KeyVaultReferenceInfo, KeyVaultReferences } from './types';
export default class DotenvAzure {
    private readonly keyVaultRateLimitMinTime;
    private readonly connectionString?;
    private readonly tenantId?;
    private readonly clientId?;
    private readonly clientSecret?;
    private readonly keyVaultClients;
    /**
     * Initializes a new instance of the DotenvAzure class.
     */
    constructor({ rateLimit, tenantId, clientId, clientSecret, connectionString, }?: DotenvAzureOptions);
    /**
     * Loads Azure App Configuration and Key Vault variables
     * and `.env` file contents into {@link https://nodejs.org/api/process.html#process_process_env | `process.env`}.
     * Example: 'KEY=value' becomes { parsed: { KEY: 'value' } }
     * @param options - controls behavior
     */
    config(options?: DotenvAzureConfigOptions): Promise<DotenvAzureConfigOutput>;
    /**
     * Parses a string or buffer in the .env file format into an object
     * and merges it with your Azure App Configuration and Key Vault variables.
     * It does not change {@link https://nodejs.org/api/process.html#process_process_env | `process.env`}.
     * @param src - contents to be parsed
     * @param options - additional options
     * @returns an object with keys and values
     */
    parse(src: string, options?: DotenvParseOptions): Promise<DotenvAzureParseOutput>;
    /**
     * Loads your Azure App Configuration and Key Vault variables.
     * It does not change {@link https://nodejs.org/api/process.html#process_process_env | `process.env`}.
     * @param dotenvVars - dotenv parse() output containing azure credentials variables
     * @returns an object with keys and values
     */
    loadFromAzure(dotenvVars?: DotenvParseOutput): Promise<VariablesObject>;
    protected validateFromEnvExample(options: DotenvAzureConfigOptions, dotenvError?: Error): void;
    protected getAppConfigurations(client: AppConfigurationClient): Promise<AppConfigurations>;
    protected getSecretsFromKeyVault(credentials: AzureCredentials, vars: KeyVaultReferences): Promise<VariablesObject>;
    protected getKeyVaultClient(credentials: AzureCredentials, vaultURL: string): SecretClient;
    protected getKeyVaultReferenceInfo({ key, value }: ConfigurationSetting): KeyVaultReferenceInfo;
    protected isKeyVaultReference(config: ConfigurationSetting): boolean;
    private getAzureCredentials;
}
export { dotenv, DotenvAzure };
//# sourceMappingURL=dotenv-azure.d.ts.map