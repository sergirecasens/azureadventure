"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidKeyVaultUrlError = exports.MissingAppConfigCredentialsError = exports.MissingEnvVarsError = void 0;
class MissingEnvVarsError extends Error {
    constructor(allowEmptyValues, dotenvFilename, exampleFilename, missingVars, error) {
        const errorMessage = `The following variables were defined in ${exampleFilename} but are not present in the environment: ${missingVars.join(', ')}\n
Make sure to add them to ${dotenvFilename} or directly to the environment.`;
        const allowEmptyValuesMessage = !allowEmptyValues
            ? 'If you expect any of these variables to be empty, you can use the `allowEmptyValues` option'
            : '';
        const envErrorMessage = error
            ? `Also, the following error was thrown when trying to read variables from  ${dotenvFilename}:\n${error.message}`
            : '';
        const message = [errorMessage, allowEmptyValuesMessage, envErrorMessage]
            .filter(Boolean)
            .join('\n\n');
        super(message);
        this.name = this.constructor.name;
        this.missing = missingVars;
        this.example = exampleFilename;
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.MissingEnvVarsError = MissingEnvVarsError;
class MissingAppConfigCredentialsError extends Error {
    constructor() {
        const message = 'At least one of the variables AZURE_APP_CONFIG_URL or AZURE_APP_CONFIG_CONNECTION_STRING is required. \
      You can also pass the option `appConfigUrl` to the DotenvAzure constructor';
        super(message);
        this.name = this.constructor.name;
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.MissingAppConfigCredentialsError = MissingAppConfigCredentialsError;
class InvalidKeyVaultUrlError extends Error {
    constructor(key) {
        const message = `Invalid Azure Key Vault URL: ${key}`;
        super(message);
        this.name = this.constructor.name;
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.InvalidKeyVaultUrlError = InvalidKeyVaultUrlError;
//# sourceMappingURL=errors.js.map