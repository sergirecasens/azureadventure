"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DotenvAzure = exports.dotenv = void 0;
const fs = __importStar(require("fs"));
const url_1 = require("url");
const bottleneck_1 = __importDefault(require("bottleneck"));
const dotenv_1 = __importDefault(require("dotenv"));
exports.dotenv = dotenv_1.default;
const identity_1 = require("@azure/identity");
const keyvault_secrets_1 = require("@azure/keyvault-secrets");
const app_configuration_1 = require("@azure/app-configuration");
const utils_1 = require("./utils");
const errors_1 = require("./errors");
class DotenvAzure {
    /**
     * Initializes a new instance of the DotenvAzure class.
     */
    constructor({ rateLimit = 45, tenantId, clientId, clientSecret, connectionString, } = {}) {
        this.keyVaultRateLimitMinTime = Math.ceil(1000 / rateLimit);
        this.connectionString = connectionString;
        this.tenantId = tenantId;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.keyVaultClients = {};
    }
    /**
     * Loads Azure App Configuration and Key Vault variables
     * and `.env` file contents into {@link https://nodejs.org/api/process.html#process_process_env | `process.env`}.
     * Example: 'KEY=value' becomes { parsed: { KEY: 'value' } }
     * @param options - controls behavior
     */
    async config(options = {}) {
        const { safe = false } = options;
        const dotenvResult = dotenv_1.default.config(options);
        const azureVars = await this.loadFromAzure(dotenvResult.parsed);
        const joinedVars = { ...azureVars, ...dotenvResult.parsed };
        utils_1.populateProcessEnv(azureVars);
        if (safe) {
            this.validateFromEnvExample(options, dotenvResult.error);
        }
        return {
            parsed: joinedVars,
            dotenv: dotenvResult,
            azure: azureVars,
        };
    }
    /**
     * Parses a string or buffer in the .env file format into an object
     * and merges it with your Azure App Configuration and Key Vault variables.
     * It does not change {@link https://nodejs.org/api/process.html#process_process_env | `process.env`}.
     * @param src - contents to be parsed
     * @param options - additional options
     * @returns an object with keys and values
     */
    async parse(src, options) {
        const dotenvVars = dotenv_1.default.parse(src, options);
        const azureVars = await this.loadFromAzure(dotenvVars);
        return { ...azureVars, ...dotenvVars };
    }
    /**
     * Loads your Azure App Configuration and Key Vault variables.
     * It does not change {@link https://nodejs.org/api/process.html#process_process_env | `process.env`}.
     * @param dotenvVars - dotenv parse() output containing azure credentials variables
     * @returns an object with keys and values
     */
    async loadFromAzure(dotenvVars) {
        const credentials = this.getAzureCredentials(dotenvVars);
        const appConfigClient = new app_configuration_1.AppConfigurationClient(credentials.connectionString);
        const { appConfigVars, keyVaultReferences } = await this.getAppConfigurations(appConfigClient);
        const keyVaultSecrets = await this.getSecretsFromKeyVault(credentials, keyVaultReferences);
        return { ...appConfigVars, ...keyVaultSecrets };
    }
    validateFromEnvExample(options, dotenvError) {
        const { allowEmptyValues = false, example = '.env.example', path = '.env' } = options;
        const processEnv = allowEmptyValues ? process.env : utils_1.compact(process.env);
        const exampleVars = dotenv_1.default.parse(fs.readFileSync(example));
        const missing = utils_1.difference(Object.keys(exampleVars), Object.keys(processEnv));
        if (missing.length > 0) {
            throw new errors_1.MissingEnvVarsError(allowEmptyValues, path, example, missing, dotenvError);
        }
    }
    async getAppConfigurations(client) {
        const appConfigVars = {};
        const keyVaultReferences = {};
        for await (const config of client.listConfigurationSettings()) {
            if (this.isKeyVaultReference(config)) {
                keyVaultReferences[config.key] = this.getKeyVaultReferenceInfo(config);
            }
            else {
                appConfigVars[config.key] = config.value;
            }
        }
        return { appConfigVars, keyVaultReferences };
    }
    async getSecretsFromKeyVault(credentials, vars) {
        const secrets = {};
        // limit requests to avoid Azure AD rate limiting
        const limiter = new bottleneck_1.default({ minTime: this.keyVaultRateLimitMinTime });
        const getSecret = async (key, info) => {
            const keyVaultClient = this.getKeyVaultClient(credentials, info.vaultUrl.href);
            const response = await keyVaultClient.getSecret(info.secretName, {
                version: info.secretVersion,
            });
            secrets[key] = response.value;
        };
        const secretsPromises = Object.entries(vars).map(([key, val]) => limiter.schedule(() => getSecret(key, val)));
        await Promise.all(secretsPromises);
        return secrets;
    }
    getKeyVaultClient(credentials, vaultURL) {
        const { tenantId, clientId, clientSecret } = credentials;
        if (!this.keyVaultClients[vaultURL]) {
            if (tenantId && clientId && clientSecret) {
                this.keyVaultClients[vaultURL] = new keyvault_secrets_1.SecretClient(vaultURL, new identity_1.ClientSecretCredential(tenantId, clientId, clientSecret));
            }
            else {
                this.keyVaultClients[vaultURL] = new keyvault_secrets_1.SecretClient(vaultURL, new identity_1.ManagedIdentityCredential());
            }
        }
        return this.keyVaultClients[vaultURL];
    }
    getKeyVaultReferenceInfo({ key, value }) {
        try {
            const obj = value && JSON.parse(value);
            const keyVaultUrl = new url_1.URL(obj.uri);
            const [, , secretName, secretVersion] = keyVaultUrl.pathname.split('/');
            if (!secretName) {
                throw new Error('KeyVault URL does not have a secret name');
            }
            return {
                vaultUrl: new url_1.URL(keyVaultUrl.origin),
                secretUrl: keyVaultUrl,
                secretName,
                secretVersion,
            };
        }
        catch {
            throw new errors_1.InvalidKeyVaultUrlError(key);
        }
    }
    isKeyVaultReference(config) {
        return (config.contentType === 'application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8');
    }
    getAzureCredentials(dotenvVars = {}) {
        const vars = { ...dotenvVars, ...process.env };
        const connectionString = this.connectionString || vars.AZURE_APP_CONFIG_CONNECTION_STRING;
        if (!connectionString) {
            throw new errors_1.MissingAppConfigCredentialsError();
        }
        return {
            connectionString,
            tenantId: this.tenantId || vars.AZURE_TENANT_ID,
            clientId: this.clientId || vars.AZURE_CLIENT_ID,
            clientSecret: this.clientSecret || vars.AZURE_CLIENT_SECRET,
        };
    }
}
exports.default = DotenvAzure;
exports.DotenvAzure = DotenvAzure;
//# sourceMappingURL=dotenv-azure.js.map